What is typescript? It is a development tool to help me for type safety of my project and also it helps in collaboration so your team knows what type to use.
Docs:   https://www.typescriptlang.org/docs/

LEASON 1: COMMANDS 
// to install typescript globally
npm install -g typescript

// runs the typecript
tsc intro.ts                                        // command - name of the file
                                                    // converts intro.ts to javascript inside intro.js

-----------------------------------------------------------------------------------------------

LEASON 2: TYPES
  Number    String    Boolean
  Null      Undefine  Void
  Object    Array     Tuples    ...
  Any       Never     unknown

Docs: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html

format 
(     name:     type   =  value      )
const fullName: string = 'Jessica Lee'

-----------------------------------------------------------------------------------------------

LESSON 3: THE PRIMITIVES: string, number and boolean
- typescript automatically provide variable type

// GOOD PRACTICE
let xNumId = 135.23

// BAD PRACTICE
let yNumId: number = 166.23; 

Docs: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html

-----------------------------------------------------------------------------------------------

LESSON 4: ANY (Not recommeded to use)
- 'any' don't use type-checking
- 'noImplicitAny' to flag any implicit 'any' as an error
- in lesson 4 shows best practices on using 'any'

Docs: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html

-----------------------------------------------------------------------------------------------

LESSON 5: FUNCTIONS
PART 1: Parameters type
- 'string', 'boolean' and 'number

PART 2: Return type
- 'string', 'boolean', 'number, 'void' and 'never'

Example: The inferred return type is void
function getMultiply (val: number): void {
 return;
}

Docs: https://www.typescriptlang.org/docs/handbook/2/functions.html#void

-----------------------------------------------------------------------------------------------

LESSON 6: OBJECTS with functions (Type Aliases or you can also use Interface)
Part 1: Passing an object type inside parameters of a function
- avoiding bugs/ bad practices when passing object inside a method

Part 2: Using 'type' to define that object variables and types
- can be used in return type and parameter type

Part 3: TYPE options and COMBINATIONS of type
- uses of 'readonly' and 'optional' fields on 'type'
- 'readonly' can only be seen/used in typescript not in js file
- MIX and MATCH can be useful when utilizing an existing type

Added readonly properties, optional fields, and combined types using intersections

Docs: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-aliases

-----------------------------------------------------------------------------------------------

LESSON 7: TYPE ALIASSES or ARRAYS
- 'Array<number>' or 'string[]' both has same functionality
- 'type aliases' can be used for complex arrays

Docs: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#arrays

-----------------------------------------------------------------------------------------------

LESSON 8: UNIONS
  - Unions is inclution of 1 or more data types

Docs: https://www.typescriptlang.org/docs/handbook/unions-and-intersections.html

-----------------------------------------------------------------------------------------------

LESSON 9: TUPLES
  - Tuples is used to give a specific order inside an array.
  - There are 2 problems with tuples to look out for.
    - the array value is changable.
    - we can use array method. For example we can push a new value inside the array.
  
Docs: https://www.typescriptlang.org/docs/handbook/basic-types.html#tuple